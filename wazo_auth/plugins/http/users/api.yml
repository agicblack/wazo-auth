paths:
  /users:
    get:
      tags:
        - users
      security:
        - wazo_auth_token: []
      description: '**Required ACL**: `auth.users.read`'
      summary: 'Retrieves the list of users'
      parameters:
      - $ref: '#/parameters/order'
      - $ref: '#/parameters/direction'
      - $ref: '#/parameters/limit'
      - $ref: '#/parameters/offset'
      - $ref: '#/parameters/search'
      responses:
        '200':
          description: 'The list of user'
          schema:
            $ref: '#/definitions/UserList'
    post:
      consumes:
        - application/json
      produces:
        - application/json
      summary: Create a user
      description: "**Required ACL**: `auth.users.create`
      Creates a new user that can be used to retrieve a token. The UUID can be used to link this user the a
      xivo-confd user by using the same UUID"
      operationId: createUser
      tags:
        - users
      parameters:
        - name: body
          in: body
          description: The user creation parameters
          required: true
          schema:
            $ref: '#/definitions/UserCreate'
      responses:
        '200':
          description: The new user data without the password
          schema:
            $ref: '#/definitions/UserPostResponse'
        '400':
          description: Invalid body
          schema:
            $ref: '#/definitions/APIError'
  /users/{user_uuid}:
    get:
      tags:
        - users
      security:
      - wazo_auth_token: []
      description: '**Required ACL**: `auth.users.{user_uuid}.read`'
      parameters:
      - $ref: '#/parameters/user_uuid'
      summary: Retrieves the details of a user
      responses:
        '200':
          description: "The user's data"
          schema:
            $ref: '#/definitions/UserResult'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: User not found
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: System related error
          schema:
            $ref: '#/definitions/Error'
    delete:
      operationId: delete_user
      tags:
        - users
      security:
      - wazo_auth_token: []
      description: '**Required ACL**: `auth.users.{user_uuid}.delete`'
      parameters:
      - $ref: '#/parameters/user_uuid'
      summary: Delete a user
      responses:
        '204':
          description: The user has been removed
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: not found
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: System related error
          schema:
            $ref: '#/definitions/Error'
  /users/{user_uuid}/password:
    put:
      consumes:
        - application/json
      tags:
        - users
      security:
        - wazo_auth_token: []
      description: "**Required ACL**: `auth.users.{user_uuid}.password.edit`
      Change a user's password"
      summary: "Change the user's password"
      parameters:
        - name: body
          in: body
          description: The user creation parameters
          required: true
          schema:
            $ref: '#/definitions/PasswordChange'
      responses:
        '204':
          description: 'Password changed'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: User not found
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: System related error
          schema:
            $ref: '#/definitions/Error'
definitions:
  UserCreate:
    type: object
    properties:
      uuid:
        type: string
        description: "The user's UUID"
      username:
        type: string
        description: The username that will identify that new username
      password:
        type: string
        description: The password of the newly created username
      email_address:
        type: string
        description: The main email address of the new username
    required:
      - username
      - email_address
  PasswordChange:
    type: object
    properties:
      old_password:
        type: string
        description: The old password
      new_password:
        type: string
        description: The desired password
    required:
      - old_password
      - new_password
